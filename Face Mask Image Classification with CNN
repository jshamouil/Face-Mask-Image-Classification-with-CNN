{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":1386555,"sourceType":"datasetVersion","datasetId":809358}],"dockerImageVersionId":30096,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/joshuashamouil/face-mask-image-classification-with-cnn?scriptVersionId=68046378\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n# for dirname, _, filenames in os.walk('/kaggle/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import os\n\nimport pandas as pd\nimport numpy as np\nimport warnings\nwarnings.filterwarnings(action=\"ignore\")\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler \nfrom sklearn.model_selection import train_test_split \nfrom sklearn.metrics import classification_report\n#tensorflow libraries\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import MaxPooling2D, Dense, Dropout,Flatten, Conv2D\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.losses import SparseCategoricalCrossentropy\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.callbacks import TensorBoard,EarlyStopping ","metadata":{"execution":{"iopub.status.busy":"2021-07-09T14:52:05.407423Z","iopub.execute_input":"2021-07-09T14:52:05.40805Z","iopub.status.idle":"2021-07-09T14:52:12.538631Z","shell.execute_reply.started":"2021-07-09T14:52:05.407957Z","shell.execute_reply":"2021-07-09T14:52:12.537494Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"with_mask_dir=r'../input/face-mask-dataset/data/with_mask'\nwithout_mask_dir=r'../input/face-mask-dataset/data/without_mask'\nfilepaths = []\nlabels= []\ndict_list = [with_mask_dir, without_mask_dir]\nfor i, j in enumerate(dict_list):\n    flist=os.listdir(j)\n    for f in flist:\n        fpath=os.path.join(j,f)\n        filepaths.append(fpath)\n        if i==0:\n          labels.append('with_mask')\n        else:\n          labels.append('without_mask') \n    \nFseries = pd.Series(filepaths, name=\"filepaths\")\nLseries = pd.Series(labels, name=\"labels\")\nmask_data = pd.concat([Fseries,Lseries], axis=1)\nmask_df = pd.DataFrame(mask_data)\nprint(mask_df.head())\nprint(mask_df[\"labels\"].value_counts())","metadata":{"execution":{"iopub.status.busy":"2021-07-09T14:53:23.252235Z","iopub.execute_input":"2021-07-09T14:53:23.252722Z","iopub.status.idle":"2021-07-09T14:53:23.755619Z","shell.execute_reply.started":"2021-07-09T14:53:23.252676Z","shell.execute_reply":"2021-07-09T14:53:23.754546Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#shape of datatset\nmask_df.shape","metadata":{"execution":{"iopub.status.busy":"2021-07-09T14:53:27.082023Z","iopub.execute_input":"2021-07-09T14:53:27.082488Z","iopub.status.idle":"2021-07-09T14:53:27.090765Z","shell.execute_reply.started":"2021-07-09T14:53:27.082428Z","shell.execute_reply":"2021-07-09T14:53:27.089915Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_set, test_images = train_test_split(mask_df, test_size=0.3, random_state=42)\ntest_set, val_set = train_test_split(test_images, test_size=0.2, random_state=42)","metadata":{"execution":{"iopub.status.busy":"2021-07-09T14:53:29.540785Z","iopub.execute_input":"2021-07-09T14:53:29.541309Z","iopub.status.idle":"2021-07-09T14:53:29.54957Z","shell.execute_reply.started":"2021-07-09T14:53:29.541275Z","shell.execute_reply":"2021-07-09T14:53:29.548773Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Generate batches of tensor image data with real-time data augmentation.\nimage_gen = ImageDataGenerator(preprocessing_function= tf.keras.applications.mobilenet_v2.preprocess_input)\n\ntrain = image_gen.flow_from_dataframe(dataframe= train_set,x_col=\"filepaths\",y_col=\"labels\",\n                                      target_size=(244,244),\n                                      color_mode='grayscale',\n                                      class_mode=\"categorical\", #used for Sequential Model\n                                      batch_size=32,\n                                      shuffle=False            #do not shuffle data\n                                     )\n\ntest = image_gen.flow_from_dataframe(dataframe= test_set,x_col=\"filepaths\", y_col=\"labels\",\n                                     target_size=(244,244),\n                                     color_mode='grayscale',\n                                     class_mode=\"categorical\",\n                                     batch_size=32,\n                                     shuffle= False\n                                    )\n\nval = image_gen.flow_from_dataframe(dataframe= val_set,x_col=\"filepaths\", y_col=\"labels\",\n                                    target_size=(244,244),\n                                    color_mode= 'grayscale',\n                                    class_mode=\"categorical\",\n                                    batch_size=32,\n                                    shuffle=False\n                                   )","metadata":{"execution":{"iopub.status.busy":"2021-07-09T14:53:32.871273Z","iopub.execute_input":"2021-07-09T14:53:32.87181Z","iopub.status.idle":"2021-07-09T14:53:43.831179Z","shell.execute_reply.started":"2021-07-09T14:53:32.871776Z","shell.execute_reply":"2021-07-09T14:53:43.83011Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"classes=list(train.class_indices.keys())\nprint (classes)","metadata":{"execution":{"iopub.status.busy":"2021-07-09T14:53:51.511332Z","iopub.execute_input":"2021-07-09T14:53:51.511766Z","iopub.status.idle":"2021-07-09T14:53:51.517824Z","shell.execute_reply.started":"2021-07-09T14:53:51.511728Z","shell.execute_reply":"2021-07-09T14:53:51.516643Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def show_images(image_gen):\n    test_dict = test.class_indices\n    classes = list(test_dict.keys())\n    images, labels=next(image_gen) # get a sample batch from the generator \n    plt.figure(figsize=(20,20))\n    length = len(labels)\n    if length<25:\n        r=length\n    else:\n        r=25\n    for i in range(r):\n        plt.subplot(5,5,i+1)\n        image=(images[i]+1)/2 #scale images between 0 and 1\n        plt.imshow(image)\n        index=np.argmax(labels[i])\n        class_name=classes[index]\n        plt.title(class_name, color=\"green\",fontsize=16)\n        plt.axis('off')\n    plt.show()","metadata":{"execution":{"iopub.status.busy":"2021-07-09T14:53:53.848434Z","iopub.execute_input":"2021-07-09T14:53:53.849001Z","iopub.status.idle":"2021-07-09T14:53:53.856413Z","shell.execute_reply.started":"2021-07-09T14:53:53.848966Z","shell.execute_reply":"2021-07-09T14:53:53.855566Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"show_images(train)","metadata":{"execution":{"iopub.status.busy":"2021-07-09T14:53:57.923802Z","iopub.execute_input":"2021-07-09T14:53:57.924347Z","iopub.status.idle":"2021-07-09T14:54:00.517324Z","shell.execute_reply.started":"2021-07-09T14:53:57.924306Z","shell.execute_reply":"2021-07-09T14:54:00.51453Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def plot_loss_and_accuracy(history):\n    history_df = pd.DataFrame(history)\n    history_df.loc[0:, ['loss', 'val_loss']].plot()\n    history_df.loc[0:, ['accuracy', 'val_accuracy']].plot()","metadata":{"execution":{"iopub.status.busy":"2021-07-09T14:54:25.509855Z","iopub.execute_input":"2021-07-09T14:54:25.510274Z","iopub.status.idle":"2021-07-09T14:54:25.515798Z","shell.execute_reply.started":"2021-07-09T14:54:25.510234Z","shell.execute_reply":"2021-07-09T14:54:25.514584Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Model #1","metadata":{}},{"cell_type":"code","source":"import keras\nfrom tensorflow.keras import layers\n\nCNN_2 = keras.Sequential([\n    layers.Conv2D(32, kernel_size=(3,3), activation='relu', padding='same', input_shape=(244,244,1)),\n    layers.MaxPooling2D(pool_size=(2, 2)),\n    \n    layers.Conv2D(64, kernel_size=(3,3), activation='relu'),\n    layers.MaxPooling2D(pool_size=(2, 2)),\n    \n    layers.Conv2D(32, kernel_size=(3,3), activation='relu'),\n    layers.MaxPooling2D(pool_size=(2, 2)),\n    layers.Dropout(0.25),\n    \n    layers.Flatten(),\n    layers.Dense(64, activation=\"relu\"),\n    layers.Dropout(0.5),\n    layers.Dense(2, activation='softmax')\n])\n\nCNN_2.compile(\n    optimizer='adam',\n    loss='categorical_crossentropy',\n    metrics=['accuracy']\n)\nCNN_2.optimizer.lr=0.001\n\nCNN_2.summary()","metadata":{"execution":{"iopub.status.busy":"2021-07-08T20:14:16.102579Z","iopub.execute_input":"2021-07-08T20:14:16.102946Z","iopub.status.idle":"2021-07-08T20:14:16.49328Z","shell.execute_reply.started":"2021-07-08T20:14:16.102904Z","shell.execute_reply":"2021-07-08T20:14:16.4923Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"history_CNN = CNN_2.fit(train, validation_data= val, epochs=15,verbose=1)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#resuts from model 1\nplot_loss_and_accuracy(history_CNN.history)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"The above charts show the accuracy and loss for the training set and test set. In the loss chart we see the test set in orange stabilize much faster than the training loss. This same behavior is seen in the accuracy chart. This shows there exists some overfitting in the model. Next, I will adjust the parameters in the second model to overcome the overfitting.","metadata":{}},{"cell_type":"code","source":"pred = CNN_2.predict(test)\npred = np.argmax(pred, axis=1) #pick class with highest  probability\n\nlabels = (train.class_indices)\nlabels = dict((v,k) for k,v in labels.items())\npred2 = [labels[k] for k in pred]\n\ny_test = test_set.labels # set y_test to the expected output\nprint(classification_report(y_test, pred2))","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Model #2","metadata":{}},{"cell_type":"code","source":"from tensorflow.keras import layers\n\nMyCnn = tf.keras.models.Sequential([\n  layers.Conv2D(32, 3, activation='relu',input_shape=(244,244,1)),\n  layers.MaxPooling2D(),\n    \n  layers.Conv2D(64, 3, activation='relu'),\n  layers.MaxPooling2D(),\n    \n  layers.Conv2D(128, 3, activation='relu'),\n  layers.MaxPooling2D(),\n\n  layers.GlobalAveragePooling2D(),\n  layers.Dense(256, activation='relu'),\n  layers.Dense(2, activation= 'softmax')\n])\n\nMyCnn.compile(\n    optimizer='adam',\n    loss='categorical_crossentropy',\n    metrics=['accuracy']\n)\n\nMyCnn.summary()","metadata":{"execution":{"iopub.status.busy":"2021-07-09T14:55:16.754586Z","iopub.execute_input":"2021-07-09T14:55:16.75501Z","iopub.status.idle":"2021-07-09T14:55:16.914186Z","shell.execute_reply.started":"2021-07-09T14:55:16.754976Z","shell.execute_reply":"2021-07-09T14:55:16.913137Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"history_my_CNN = MyCnn.fit(train, validation_data= val, epochs=15,verbose=1)","metadata":{"execution":{"iopub.status.busy":"2021-07-09T14:56:43.768044Z","iopub.execute_input":"2021-07-09T14:56:43.76869Z","iopub.status.idle":"2021-07-09T16:18:34.96374Z","shell.execute_reply.started":"2021-07-09T14:56:43.768648Z","shell.execute_reply":"2021-07-09T16:18:34.962687Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plot_loss_and_accuracy(history_my_CNN.history)","metadata":{"execution":{"iopub.status.busy":"2021-07-09T16:42:52.243317Z","iopub.execute_input":"2021-07-09T16:42:52.243782Z","iopub.status.idle":"2021-07-09T16:42:52.625044Z","shell.execute_reply.started":"2021-07-09T16:42:52.24374Z","shell.execute_reply":"2021-07-09T16:42:52.624208Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"The above charts show the accuracy and loss for the training set and test set for the second model. In the loss chart we see the test set in orange stabilizes at about the same rate as the training loss in blue. Although we have overcome overfitting, the accuracy of this model#2 is similar to model#1. The similarities can also seen in the confusion matricies below.","metadata":{}},{"cell_type":"markdown","source":"# Confustion Matrix","metadata":{}},{"cell_type":"code","source":"pred_mod2 = MyCnn.predict(test)\npred_mod2 = np.argmax(pred_mod2, axis=1) #pick class with highest  probability\n\nlabels = (train.class_indices)\nlabels = dict((v,k) for k,v in labels.items())\npred2_mod2 = [labels[k] for k in pred_mod2]\n\ny_test = test_set.labels # set y_test to the expected output\nprint(classification_report(y_test, pred2_mod2))","metadata":{"execution":{"iopub.status.busy":"2021-07-09T16:49:04.138075Z","iopub.execute_input":"2021-07-09T16:49:04.138503Z","iopub.status.idle":"2021-07-09T16:49:38.236021Z","shell.execute_reply.started":"2021-07-09T16:49:04.138445Z","shell.execute_reply":"2021-07-09T16:49:38.234643Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# model 1\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nplt.figure(figsize = (10,5))\ncm = confusion_matrix(y_test, pred2)\nsns.heatmap(cm, annot=True, fmt = 'g')","metadata":{"execution":{"iopub.status.busy":"2021-07-07T19:43:27.081321Z","iopub.execute_input":"2021-07-07T19:43:27.081858Z","iopub.status.idle":"2021-07-07T19:43:27.342698Z","shell.execute_reply.started":"2021-07-07T19:43:27.081814Z","shell.execute_reply":"2021-07-07T19:43:27.34162Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# model 2\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nplt.figure(figsize = (10,5))\ncm = confusion_matrix(y_test, pred2_mod2)\nsns.heatmap(cm, annot=True, fmt = 'g')","metadata":{"execution":{"iopub.status.busy":"2021-07-09T16:52:31.981135Z","iopub.execute_input":"2021-07-09T16:52:31.981601Z","iopub.status.idle":"2021-07-09T16:52:32.268597Z","shell.execute_reply.started":"2021-07-09T16:52:31.981562Z","shell.execute_reply":"2021-07-09T16:52:32.267761Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"A special thanks to the following notebooks:\n\n* [Brain Tumor Classification- 98.4% Accuracy](https://www.kaggle.com/purvitsharma/brain-tumor-classification-98-4-accuracy) - [Purvit Vashishtha](https://www.kaggle.com/purvitsharma)\n* [CnnForMaskDetection(Improved:Size and Performance)](https://www.kaggle.com/vanvalkenberg/cnnformaskdetection-improved-size-and-performance) - [Ritwek Khosla](https://www.kaggle.com/vanvalkenberg)","metadata":{}}]}